
/*
==================================================================================================================
General
==================================================================================================================
*/

playervar define slowTimer = 0;
playervar define healee = null;
playervar tracerCooldowns tc;

rule: "bans"
Event.OngoingPlayer
{
    SetAllowedHeroes(EventPlayer(), [Hero.Moira, Hero.Reinhardt, Hero.Sombra, Hero.Pharah, Hero.Tracer, winton, Hero.Widowmaker]);
}



/*
==================================================================================================================
Rein
==================================================================================================================
*/


rule: "reinPassives"
Event.OngoingPlayer
if (HeroOf(EventPlayer()) == Hero.Reinhardt)
if (IsHeroBeingPlayed(Hero.Reinhardt, EventPlayer().Team()))
{
    SetMaxHealth(EventPlayer(), 100);
    Wait(0.1);
    SetMaxHealth(EventPlayer(), 100*(699/MaxHealth(EventPlayer())));
    StartScalingPlayer(EventPlayer(), 1, false);
    SetAbility1Enabled(EventPlayer(), true);
}

rule: "reinActives"
Event.OngoingPlayer
if (HeroOf(EventPlayer()) == Hero.Reinhardt)
if (IsButtonHeld(EventPlayer(), Button.SecondaryFire))
{
    SetMoveSpeed(EventPlayer(), 140);
    Damage(EventPlayer(), EventPlayer(), 1);
    StartDamageOverTime(EventPlayer(), EventPlayer(), 0.30, 15);
    Wait(0.25);
    
    LoopIf(IsButtonHeld(EventPlayer(), Button.SecondaryFire));
    
    SetMoveSpeed(EventPlayer(), 100);

}

rule: "reinChargeReset"
Event.OnElimination
if (HeroOf(EventPlayer()) == Hero.Reinhardt)
if (EventAbility() == Button.Ability1)
{
    SetAbilityCooldown(EventPlayer(), Button.Ability1, 0.25);
}

/*
==================================================================================================================
Moira
==================================================================================================================
*/


rule: "moiraPassives"
Event.OngoingPlayer
if (HeroOf(EventPlayer()) == Hero.Moira)
{
    SetMaxHealth(EventPlayer(), 100);
    Wait(0.1);
    SetMaxHealth(EventPlayer(), 100*(150/MaxHealth(EventPlayer())));
    StartScalingPlayer(EventPlayer(), 1, false);
    SetAbility1Enabled(EventPlayer(), true);
}

rule: "moiraFadeCooldown"
Event.OngoingPlayer
if (HeroOf(EventPlayer()) == Hero.Moira)
if (EventPlayer().IsUsingAbility1())
{
    SetGravity(EventPlayer(), 50);
    SetMoveSpeed(EventPlayer(), 200);
    slowTimer = 0;
    Wait(0.95);
    
    SetAbilityCooldown(EventPlayer(), Button.Ability1, 9);

    WaitUntil(EventPlayer().IsOnGround(), 10);

    SetGravity(EventPlayer(), 100);
    SetMoveSpeed(EventPlayer(), 100);
}

rule: "moiraOrb"
Event.OnDamageDealt
if (HeroOf(EventPlayer()) == Hero.Moira)
if(EventAbility() == Button.Ability2)
{
    Heal(Victim(), null, EventDamage()); // Heal to nullify damage, then can add custom
    
    Victim().slowTimer = 0.5;
}

rule: "slowOrbTimer"
Event.OngoingPlayer
if (EventPlayer().slowTimer > 0)
{
    SetMoveSpeed(EventPlayer(), 0);
    Wait(0.1);
    slowTimer -= 0.1;
    LoopIf(slowTimer > 0.1);
    SetMoveSpeed(EventPlayer(), 100);
    slowTimer = 0;

}


rule: "moiraScratch"
Event.OnDamageDealt
if (HeroOf(EventPlayer()) == Hero.Moira)
if(EventAbility() == Button.Melee)
{
    StartDamageOverTime(Victim(), EventPlayer(), 2, 15);
    SetAbilityResource(EventPlayer(), Button.PrimaryFire, AbilityResource(EventPlayer(), Button.PrimaryFire)+5);
}

rule: "moiraPrimary"
Event.OnDamageDealt
if (HeroOf(EventPlayer()) == Hero.Moira)
if(EventAbility() == Button.SecondaryFire)
{
    Heal(Victim(), null, EventDamage());
    Damage(Victim(), EventPlayer(), 20 - (AbilityResource(EventPlayer(), Button.PrimaryFire)/8));
}

/*
==================================================================================================================
Sombra
==================================================================================================================
*/

rule: "sombraPassives"
Event.OngoingPlayer
if (HeroOf(EventPlayer()) == Hero.Sombra)
{
    SetMaxHealth(EventPlayer(), 100);
    Wait(0.1);
    SetMaxHealth(EventPlayer(), 100*(50/MaxHealth(EventPlayer())));
    StartScalingPlayer(EventPlayer(), 0.5, false);
    SetAbility1Enabled(EventPlayer(), true);
}

rule: "sombraSneak"
Event.OnDamageDealt
if (HeroOf(EventPlayer()) == Hero.Sombra)
if (EventAbility() == Button.Melee)
if (Victim().FacingDirection().X >= EventPlayer().FacingDirection().X - 0.6)
if (Victim().FacingDirection().X <= EventPlayer().FacingDirection().X + 0.6)
if (Victim().FacingDirection().Z >= EventPlayer().FacingDirection().Z - 0.6)
if (Victim().FacingDirection().Z <= EventPlayer().FacingDirection().Z + 0.6)
{
    Damage(Victim(), EventPlayer(), 4444);
    PlayEffect(AllPlayers(Team.Team1), PlayEffect.GoodExplosion, Color.Rose, Victim().Position(), 3);
    PlayEffect(AllPlayers(Team.Team2), PlayEffect.GoodExplosion, Color.Rose, Victim().Position(), 3);
}

rule: "sombraInvis"
Event.OngoingPlayer
if (HeroOf(EventPlayer()) == Hero.Sombra)
if (EventPlayer().IsUsingAbility1()){
    SetDamageReceived(EventPlayer(), 1);
    SetMoveSpeed(EventPlayer(), 200);

    Wait(0.2);
    LoopIf(EventPlayer().IsUsingAbility1());
    SetDamageReceived(EventPlayer(), 100);
    SetMoveSpeed(EventPlayer(), 100);
}


rule: "primaryFireSombra"
Event.OnDamageDealt
if (HeroOf(EventPlayer()) == Hero.Sombra)
if (EventAbility() == Button.PrimaryFire)
if (Victim().Health().Round() / Victim().MaxHealth() > 0.25)
if (!HasStatus(Victim(), Status.Hacked))
{
    Heal(Victim(), null, EventDamage());
    Damage(Victim(), EventPlayer(), 2);
}

rule: "executeSombra"
Event.OnDamageDealt
if (HeroOf(EventPlayer()) == Hero.Sombra)
if (EventAbility() == Button.PrimaryFire)
if (Victim().Health().Round() / Victim().MaxHealth() <= 0.25)
if (!HasStatus(Victim(), Status.Hacked))
{
    Damage(Victim(), EventPlayer(), 4444);
    //PlayEffect(AllPlayers(Team.Team1), PlayEffect.SombraEmpExplosioneffect, Color.Red, Victim().Position(), 3);
    //PlayEffect(AllPlayers(Team.Team2), PlayEffect.SombraEmpExplosioneffect, Color.Red, Victim().Position(), 3);
}

playervar define stacks = 0;
globalvar define stacker = null;

rule: "primaryFireSombra"
Event.OnDamageDealt
if (HeroOf(EventPlayer()) == Hero.Sombra)
if (EventAbility() == Button.PrimaryFire)
if (HasStatus(Victim(), Status.Hacked))
{
    Victim().stacks++;
    stacker = EventPlayer();
    Heal(Victim(), null, EventDamage());
    Damage(Victim(), EventPlayer(), 2);
}

rule: "slowOrbTimer"
Event.OngoingPlayer
if (EventPlayer().stacks > 0)
{
    WaitUntil(!HasStatus(EventPlayer(), Status.Hacked), 20);
    Damage(EventPlayer(), stacker, EventPlayer().stacks*2); 
    EventPlayer().stacks = 0;
}

/*
==================================================================================================================
Mercy
==================================================================================================================
*/

rule: "mercyPassives"
Event.OngoingPlayer
if (HeroOf(EventPlayer()) == Hero.Mercy)
{
    SetMaxHealth(EventPlayer(), 100);
    Wait(0.1);
    SetMaxHealth(EventPlayer(), 100*(100/MaxHealth(EventPlayer())));
    SetAbility1Enabled(EventPlayer(), true);
}

rule: "setupHealee"
Event.OngoingPlayer
if (HeroOf(EventPlayer()) == Hero.Mercy)
{
    EventPlayer().healee = null;
}

rule: "setupHealee2"
Event.OnHealingTaken
{
    Healer().healee = EventPlayer();
}

rule: "damageBoost"
Event.OngoingPlayer
if (IsFiringSecondary(EventPlayer()))
if (HeroOf(EventPlayer()) == Hero.Mercy)
{
    StartHoldingButton(EventPlayer(), Button.PrimaryFire);
    WaitUntil(EventPlayer().healee, 9999);
    StopHoldingButton(EventPlayer(), Button.PrimaryFire);
    SetDamageReceived(EventPlayer().healee, 70);
    SetDamageDealt(EventPlayer().healee, 100);
    Wait(0.2);
    LoopIf(IsFiringSecondary(EventPlayer()));

    SetDamageReceived(EventPlayer().healee, 100);
}

/*
==================================================================================================================
Pharah
==================================================================================================================
*/


rule: "pharahPassives"
Event.OngoingPlayer
if (HeroOf(EventPlayer()) == Hero.Pharah)
{
    SetMaxHealth(EventPlayer(), 100);
    Wait(0.1);
    SetMaxHealth(EventPlayer(), 100*(249/MaxHealth(EventPlayer())));
    StartScalingPlayer(EventPlayer(), 1.0, false);
    SetMoveSpeed(EventPlayer(), 170);
    SetGravity(EventPlayer(), 150);
    SetAbility1Enabled(EventPlayer(), false);
    SetMaxAmmo(EventPlayer(), 0, 12);
}

rule: "grounded"
Event.OngoingPlayer
if (HeroOf(EventPlayer()) == Hero.Pharah)
if (EventPlayer().IsInAir())
{
    Wait(1);
    grounded();
    SetMoveSpeed(EventPlayer(), 170);
    SetGravity(EventPlayer(), 150); 
}

void grounded() "grounded"
{
    SetMoveSpeed(EventPlayer(), 120);
    SetGravity(EventPlayer(), 200);
    Wait(0.2);
    LoopIf(EventPlayer().IsInAir());
}


rule: "pharahBoop"
Event.OngoingPlayer
if (HeroOf(EventPlayer()) == Hero.Pharah)
if (EventPlayer().IsUsingAbility2())
{
    SetKnockbackReceived(EventPlayer(), 250);
    Wait(0.5);
    SetKnockbackReceived(EventPlayer(), 100);
}

rule: "pharahBoop"
Event.OngoingPlayer
if (HeroOf(EventPlayer()) == Hero.Pharah)
if (IsJumping(EventPlayer()))
{
    Wait(0.2);
    StopHoldingButton(EventPlayer(), Button.Jump);
}

rule: "stopSuicide"
Event.OnDamageDealt
if (HeroOf(EventPlayer()) == Hero.Pharah)
if (EventPlayer() == Victim())
{
    Heal(EventPlayer(), null, EventDamage());
    SetKnockbackReceived(EventPlayer(), 200);
    Wait(0.2);
    SetKnockbackReceived(EventPlayer(), 100);
}

rule: "pharahUlt"
Event.OngoingPlayer
if (HeroOf(EventPlayer()) == Hero.Pharah)
if (IsUsingUltimate(EventPlayer()))
{
    AddHealthPoolToPlayer(EventPlayer(), HealthType.Armor, 200, true, false);

    Wait(2.5);

    RemoveAllHealthPoolsFromPlayer(EventPlayer());
}

/*
==================================================================================================================
Tracer
==================================================================================================================
*/



rule: "tracerPassives"
Event.OngoingPlayer
if (HeroOf(EventPlayer()) == Hero.Tracer)
{
    SetMaxHealth(EventPlayer(), 100);
    Wait(0.1);
    SetMaxHealth(EventPlayer(), 100*(125/MaxHealth(EventPlayer())));
    AddHealthPoolToPlayer(EventPlayer(), HealthType.Shields, 25, true, false);
    StartScalingPlayer(EventPlayer(), 1.0, false);
    SetMoveSpeed(EventPlayer(), 100);
    SetGravity(EventPlayer(), 100);
    SetAbility1Enabled(EventPlayer(), true);
    SetMaxAmmo(EventPlayer(), 0, 40);
}


rule: "blinkMelee"
Event.OngoingPlayer
if (HeroOf(EventPlayer()) == Hero.Tracer)
if (EventPlayer().IsButtonHeld(Button.Ability1))
{
    EventPlayer().tc.blinkMeleeCD = TotalTimeElapsed();
}

rule: "blinkMeleee"
Event.OngoingPlayer
if (HeroOf(EventPlayer()) == Hero.Tracer)
if (EventPlayer().IsButtonHeld(Button.SecondaryFire))
{
    EventPlayer().tc.blinkMeleeCD = TotalTimeElapsed();
}

rule: "blinkMelee2"
Event.OnDamageDealt
if (HeroOf(EventPlayer()) == Hero.Tracer)
if (EventAbility() == Button.Melee)
if (EventPlayer().tc.getCD()+0.4 > TotalTimeElapsed())
{
    SetAmmo(EventPlayer(), 0, Ammo(EventPlayer())+10);
    MaxAmmo(EventPlayer(), 40);
    SetAbilityCooldown(EventPlayer(), Button.Ability2, EventPlayer().tc.getRecallCD()-2);
} 

rule: "recall"
Event.OngoingPlayer
if (HeroOf(EventPlayer()) == Hero.Tracer)
if (EventPlayer().IsButtonHeld(Button.Ability2))
{
    EventPlayer().tc.recallCD = TotalTimeElapsed();
}

rule: "meleeBlink"
Event.OnDamageDealt
if (HeroOf(EventPlayer()) == Hero.Tracer)
if (EventAbility() == Button.Melee)
{
    EventPlayer().tc.meleeBlinkCD = TotalTimeElapsed();
}

rule: "recallMelee"
Event.OngoingPlayer
if (HeroOf(EventPlayer()) == Hero.Tracer)
if (EventPlayer().IsButtonHeld(Button.Ability2))
if (EventPlayer().tc.getRecallCD()+0.3 > TotalTimeElapsed())
{
    SetAbilityCharge(EventPlayer(), Button.Ability1, AbilityCharge(EventPlayer(), Button.Ability1)+1);
    SetDamageDealt(EventPlayer(), 125);
    Wait(5);
    SetDamageDealt(EventPlayer(), 100);
}

// Check if work on multiple, unsure.
rule: "pulseBomb"
Event.OnFinalBlow
if (HeroOf(EventPlayer()) == Hero.Tracer)
if (EventAbility() == Button.Ultimate)
{
    SetUltimateCharge(EventPlayer(), UltimateChargePercent(Attacker())+25);
}


class tracerCooldowns
{
    public Number blinkMeleeCD = 0;
    public Number recallCD;
    public Number meleeBlinkCD = 0;
    public Number getCD(){
        return blinkMeleeCD;
    }

    public Number getRecallCD(){
        return 12 - (TotalTimeElapsed() - recallCD);
    }

    public Number getCD2(){
        return meleeBlinkCD;
    }


}

/*
==================================================================================================================
Winston
==================================================================================================================
*/

class wintonManager{
    private Number attackStacks = 0;
    private Number lastStack = 0;
    private Number hudID = -1;
    private Number comboID = -2;
    private Boolean helmet;
    private Number bubbleTimer = 0;
    public Any[] pools;
    public Player[] inBubble = new Player[]();
    public Any bubble;
    public Boolean placed = false;
    private Number combo = 1;
    private Number lastUltHit = 0;

    public constructor(){
        hudID = CreateHudText(EventPlayer(), null, null, "Stacks:"+getStacks(), Location.Top, 0, Color.Gray, Color.Gray, Color.Gray, HudTextRev.String, Spectators.VisibleAlways);
        comboID = CreateHudText(EventPlayer(), null, null, "Combo:"+getCombo(), Location.Left, 0, Color.Red, Color.Red, Color.Red, HudTextRev.String, Spectators.VisibleAlways);
    }

    public void increaseCombo(){
        DestroyHudText(comboID);
        if (lastUltHit > TotalTimeElapsed()-0.5){
            combo++;
            comboID = CreateHudText(EventPlayer(), null, null, "Combo:"+RoundToInteger(getCombo()), Location.Left, 0, Color.Red, Color.Red, Color.Red, HudTextRev.String, Spectators.VisibleAlways);
            lastUltHit = TotalTimeElapsed();
        }
        else{
            combo = 1;
            lastUltHit = TotalTimeElapsed();
        }
    }

    public Number getLastHit(){
        return lastUltHit;
    }
    

    public Number getCombo(){
        return combo;
    }

    public Number getStacks()
    {
        return attackStacks;
    }

    public void hud(){
        DestroyHudText(hudID);
        hudID = CreateHudText(EventPlayer(), null, null, "Stacks:"+EventPlayer().wm.getStacks(), Location.Top, 0, Color.Gray, Color.Gray, Color.Gray, HudTextRev.String, Spectators.VisibleAlways);
    }

    public void enableHelmet(){
        helmet = true;
    }

    public void bubblePlaced(){
        bubbleTimer = TotalTimeElapsed();
    }

    public Number getLastBubble(){
        return bubbleTimer;
    }


    public void disableHelmet(){
        helmet = false;
    }

    public Boolean helmetStatus(){
        return helmet;
    }

    public void addStack( Player p)
    {
        if(ArrayContains(AllTankHeroes(), p.Hero())){
            if (TotalTimeElapsed()-1 > lastStack){
                resetStacks();
            }
            else{
                attackStacks++;
                if (attackStacks >= 50){
                    SetStatus(p, null, Status.Stunned, 1.5);
                    resetStacks();
                }
                tick();
            }
        }
        if (TotalTimeElapsed()-1 > lastStack){
            resetStacks();
        }
        
    }


    private void tick(){
       lastStack = TotalTimeElapsed(); 
    }
    

    public void resetStacks()
    {
        attackStacks = 0;
        tick();
    }

    void checkRadius(Vector pos, Player p){
        while(p.wm.getLastBubble()+8 > TotalTimeElapsed()){
            foreach (Player pl in (PlayersWithinRadius(pos, 5, p.Team(), RadiusLOS.Off))){
                if (inBubble.Contains(pl)){
                    break;
                }
                else{
                    pools = pools.Append(AddHealthPoolToPlayer(pl, HealthType.Shields, 50, true, true));
                    inBubble = inBubble.Append(pl);
                }
            }
            Wait(0.2);
        }
        foreach(Any a in pools){
            RemoveHealthPoolFromPlayer(a);
        }
        DestroyEffect(bubble);
        placed = false;
        pools = EmptyArray();
        inBubble = EmptyArray();
    }

}

globalvar define winton = Hero.Winston;
playervar wintonManager wm = null;

rule: "wintonPassives"
Event.OngoingPlayer
if (HeroOf(EventPlayer()) == winton)
{
    SetMaxHealth(EventPlayer(), 100);
    Wait(0.1);
    SetMaxHealth(EventPlayer(), 100*(400/MaxHealth(EventPlayer())));
    StartScalingPlayer(EventPlayer(), 1.0, false);
    SetMoveSpeed(EventPlayer(), 100);
    SetGravity(EventPlayer(), 100);
    SetAbility1Enabled(EventPlayer(), true);
    SetMaxAmmo(EventPlayer(), 0, 100000);
    SetDamageDealt(EventPlayer(), 1);
}

rule: "wintonPassives"
Event.OngoingPlayer
if (HeroOf(EventPlayer()) == winton)
if (EventPlayer().wm == null)
{
    EventPlayer().wm = new wintonManager();
}

rule: "wintonPrimary"
Event.OnDamageDealt
if (HeroOf(EventPlayer()) == winton)
if (EventAbility() == Button.PrimaryFire)
{
    EventPlayer().wm.addStack(Victim());
    EventPlayer().wm.hud();
    Damage(Victim(), EventPlayer(), 600);
}

rule: "wintonLand"
Event.OnDamageDealt
if (HeroOf(EventPlayer()) == winton)
if (EventAbility() == Button.Ability1)
{
    Damage(Victim(), EventPlayer(), 3000);
}

rule: "wintonLand"
Event.OnDamageDealt
if (HeroOf(EventPlayer()) == winton)
if (EventAbility() == Button.Ability1)
if (EventPlayer().DistanceTo(Victim()) <= 1)
{
    Damage(Victim(), EventPlayer(), 3000);
}

rule: "wintonHelmet"
Event.OngoingPlayer
if (HeroOf(EventPlayer()) == winton)
if (IsButtonHeld(EventPlayer(), Button.Ability1))
{
    EventPlayer().wm.enableHelmet();
    SetDamageReceived(EventPlayer(), 50);
    WaitUntil(!(IsInAir(EventPlayer())), 10);
    EventPlayer().wm.disableHelmet();
    SetDamageReceived(EventPlayer(), 100);
}

rule: "wintonHelmProtection"
Event.OnDamageTaken
if (HeroOf(EventPlayer()) == winton)
if (!EventWasCriticalHit())
if(EventPlayer().wm.helmetStatus())
{
    Damage(EventPlayer(), Attacker(), EventDamage());
}


rule: "sniperMonke"
Event.OnDamageDealt
if (HeroOf(EventPlayer()) == winton)
if (EventAbility() == Button.SecondaryFire)
{
    Damage(Victim(), EventPlayer(), 3000);
}

rule: "wintonBubble"
Event.OngoingPlayer
if (HeroOf(EventPlayer()) == winton)
if (IsButtonHeld(EventPlayer(), Button.Ability2))
if (EventPlayer().IsUsingAbility2())
if (EventPlayer().wm.placed == false)
{
    EventPlayer().wm.placed = true;
    EventPlayer().wm.bubblePlaced();
    EventPlayer().wm.bubble = CreateEffect(AllPlayers(), Effect.Sphere, Color.Blue, EventPlayer().Position(), 5, EffectRev.None);
    EventPlayer().wm.checkRadius(EventPlayer().Position(), EventPlayer());
}


/*rule: "wintonUlt"
Event.OnDamageDealt
if (HeroOf(EventPlayer()) == winton)
if (IsUsingUltimate(EventPlayer()))
if (IsButtonHeld(EventPlayer(), Button.PrimaryFire))
{
    EventPlayer().wm.increaseCombo();
    
}
*/

/*
==================================================================================================================
Window
==================================================================================================================
*/

class widowManager {
    public Player[] mined = new Player[]();
    public Any[] BlindSpheres = new Any[]();

    public constructor(){
        mined = [];
    }

    public void clearStatus(){
        mined = [];
    }
}


playervar widowManager wmm = null;

rule: "widowPassives"
Event.OngoingPlayer
if (HeroOf(EventPlayer()) == Hero.Widowmaker)
{
    SetMaxHealth(EventPlayer(), 100);
    Wait(0.1);
    SetMaxHealth(EventPlayer(), 100*(50/MaxHealth(EventPlayer())));
    AddHealthPoolToPlayer(EventPlayer(), HealthType.Shields, 100, true, false);
    StartScalingPlayer(EventPlayer(), 1.0, false);
    SetMoveSpeed(EventPlayer(), 100);
    SetGravity(EventPlayer(), 100);
    SetAbility1Enabled(EventPlayer(), true);
    SetAbility2Enabled(EventPlayer(), false);
    SetMaxAmmo(EventPlayer(), 0, 100000);
    SetDamageDealt(EventPlayer(), 1);
}

rule: "widowPassives2"
Event.OngoingPlayer
if (HeroOf(EventPlayer()) == Hero.Widowmaker)
if (EventPlayer().wmm == null)
{
    EventPlayer().wmm = new widowManager();
}

rule: "widowPrimary"
Event.OnDamageDealt
if (HeroOf(EventPlayer()) == Hero.Widowmaker)
if (EventAbility() == Button.PrimaryFire){
    Damage(Victim(), EventPlayer(), EventDamage()*10000);
}

rule: "widowGrapple"
Event.OngoingPlayer
if (HeroOf(EventPlayer()) == Hero.Widowmaker)
if (EventPlayer().IsUsingAbility1())
{
    Teleport(RayCastHitPlayer(EventPlayer(), EventPlayer().Position()+(EventPlayer().FacingDirection()*50), AllPlayers(EventPlayer().Team()), null, false), EventPlayer());
}

rule: "crack"
Event.OngoingPlayer
if (HeroOf(EventPlayer()) == Hero.Widowmaker)
if (IsButtonHeld(EventPlayer(), Button.Ability2))
{
    SetPlayerHealth(EventPlayer(), Health(EventPlayer())-50);
    SetMoveSpeed(EventPlayer(), 130);
    Wait(4);
    SetMoveSpeed(EventPlayer(), 100);
}

rule: "blind"
Event.OngoingPlayer
if (HeroOf(EventPlayer()) == Hero.Widowmaker)
if (IsButtonHeld(EventPlayer(), Button.Ultimate))
{
    Spheres();
}

void Spheres(){
    for (Number i= 0; i < 150; i++){
        foreach(Player p in AllPlayers(OppositeTeamOf(EventPlayer().Team()))){
            EventPlayer().wmm.BlindSpheres = EventPlayer().wmm.BlindSpheres.Append(CreateEffect(p, Effect.BadAura, Color.Black, p.EyePosition()+p.FacingDirection()*2.0, 4, EffectRev.None));
            EventPlayer().wmm.BlindSpheres = EventPlayer().wmm.BlindSpheres.Append(CreateEffect(p, Effect.BadAura, Color.Black, p.EyePosition()+p.FacingDirection()*2.0, 4, EffectRev.None));
            EventPlayer().wmm.BlindSpheres = EventPlayer().wmm.BlindSpheres.Append(CreateEffect(p, Effect.BadAura, Color.Black, p.EyePosition()+p.FacingDirection()*2.0, 4, EffectRev.None));
            EventPlayer().wmm.BlindSpheres = EventPlayer().wmm.BlindSpheres.Append(CreateEffect(p, Effect.BadAura, Color.Black, p.EyePosition()+p.FacingDirection()*2.0, 4, EffectRev.None));
            EventPlayer().wmm.BlindSpheres = EventPlayer().wmm.BlindSpheres.Append(CreateEffect(p, Effect.BadAura, Color.Black, p.EyePosition()+p.FacingDirection()*2.0, 4, EffectRev.None));

            StartForcingPlayerOutlines(AllPlayers(EventPlayer().Team()), AllPlayers(OppositeTeamOf(EventPlayer().Team())), false, Color.Black, OutlineType.Occluded);

        }
        Wait(0.1);
        foreach(Any a in EventPlayer().wmm.BlindSpheres){
            DestroyEffect(a);
        }
        EventPlayer().wmm.BlindSpheres = null;

    }
    StopForcingPlayerOutlines(AllPlayers(EventPlayer().Team()), AllPlayers(OppositeTeamOf(EventPlayer().Team())));
}

/*
rule: "venomMined"
Event.OnDamageDealt
if (HeroOf(EventPlayer()) == Hero.Widowmaker)
if (EventAbility() == Button.PrimaryFire)
if (!(EventWasCriticalHit()))
if (EventPlayer().wmm.mined.Contains(Victim())){
    Damage(Victim(), EventPlayer(), 2.5*EventDamage());
    EventPlayer().wmm.clearStatus();
}
*/


